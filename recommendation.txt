const ss = require('simple-statistics');

// SimÃ¼le edilmiÅŸ tweet'ler
const tweets = [
    { id: 1, text: "Yeni bir AI aracÄ± keÅŸfettim! ðŸ¤– #Teknoloji" },
    { id: 2, text: "GÃ¼n batÄ±mÄ± muhteÅŸemdi ðŸŒ… #DoÄŸa" },
    { id: 3, text: "Kahve olmadan sabah olmaz â˜• #SabahKeyfi" },
    { id: 4, text: "Kod hata verdi, yine! ðŸ˜… #Programlama" },
    { id: 5, text: "Hafta sonu planlarÄ± hazÄ±r! ðŸŽ‰ #Cuma" }
];

// KullanÄ±cÄ± beÄŸenileri: her kullanÄ±cÄ± iÃ§in beÄŸenilen tweet ID'leri
const userLikes = [
    { userId: "u1", likedTweetIds: [1, 3, 5] }, // Hedef kullanÄ±cÄ±
    { userId: "u2", likedTweetIds: [1, 2, 5] },
    { userId: "u3", likedTweetIds: [2, 3, 4] },
    { userId: "u4", likedTweetIds: [1, 3, 4] }
];

// Jaccard benzerliÄŸi hesaplama fonksiyonu
function jaccardSimilarity(setA, setB) {
    const intersection = setA.filter(x => setB.includes(x)).length;
    const union = new Set([...setA, ...setB]).size;
    return intersection / union;
}

// Hedef kullanÄ±cÄ± (u1) ile diÄŸer kullanÄ±cÄ±lar arasÄ±nda Jaccard benzerliÄŸi hesaplama
const targetUser = userLikes[0].likedTweetIds;
const similarities = userLikes.slice(1).map(otherUser => ({
    userId: otherUser.userId,
    similarity: jaccardSimilarity(targetUser, otherUser.likedTweetIds)
}));

// Benzerliklere gÃ¶re sÄ±ralama (azalan)
similarities.sort((a, b) => b.similarity - a.similarity);

// En benzer kullanÄ±cÄ±nÄ±n beÄŸendiÄŸi ama hedef kullanÄ±cÄ±nÄ±n beÄŸenmediÄŸi tweet'leri Ã¶ner
const mostSimilarUser = userLikes.find(u => u.userId === similarities[0].userId);
const recommendations = mostSimilarUser.likedTweetIds
    .filter(tweetId => !targetUser.includes(tweetId))
    .map(tweetId => tweets.find(tweet => tweet.id === tweetId));

// Twitter tarzÄ± Ã§Ä±ktÄ±
console.log("ðŸ”¥ Sana Ã–zel Ã–nerilen Tweet'ler ðŸ”¥");
recommendations.forEach(tweet => {
    console.log(`Tweet: ${tweet.text}`);
    console.log("---");
});